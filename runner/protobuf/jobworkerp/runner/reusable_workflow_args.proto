syntax = "proto3";

package jobworkerp.runner;

message ReusableWorkflowArgs {
  // # Input
  // String input for the workflow context
  // Must conform to the schema defined in the workflow definition
  // (Can be a plain string or JSON formatted string, runtime expression
  // available)
  string input = 1;

  // # Workflow Context
  // Additional context information for workflow execution
  // Can be a plain string or JSON formatted string
  optional string workflow_context = 2;

  // # Execution ID
  // Unique identifier for the workflow execution instance
  // Used to track and manage the execution state if specified
  optional string execution_id = 3;

  message Checkpoint {
    message WorkflowCheckPointContext {
      string name = 1;  // Unique name for the workflow
      string input = 2; // Input data for the workflow execution (usually JSON)
      string context_variables =
          3; // Context variables for the workflow execution (usually JSON)
    }
    message TaskCheckPointContext {
      string raw_input =
          1; // Raw input data for the task execution (usually JSON)
      string input =
          2; // Processed input data for the task execution (usually JSON)
      string raw_output =
          3; // Raw output data from the task execution (usually JSON)
      string output =
          4; // Processed output data from the task execution (usually JSON)
      string context_variables =
          5; // Context variables for the task execution (usually JSON)
    }
    message CheckPointContext {
      WorkflowCheckPointContext workflow = 1; // Workflow checkpoint context
      TaskCheckPointContext task = 2;         // Task checkpoint context
    }

    // # Checkpoint Data
    // overwrite the data for the checkpoint if specified.
    // This is JSON formatted string
    // Must conform to the schema defined in the workflow definition
    // (Can be a plain string or JSON formatted string, runtime expression
    // available) If not specified, the data from the workflow input will be
    // used If specified, it will override the input data for this checkpoint
    optional CheckPointContext data = 1;

    // # Checkpoint Position
    // The position as json pointer in the workflow where this checkpoint is
    // defined This is used to identify the checkpoint in the workflow execution
    // Must be a valid position string as defined in the workflow definition
    // (Can be a plain string or JSON formatted string, runtime expression
    // available) If not specified, the position will be set to the start of the
    // workflow
    string position = 2;
  }
  // # Checkpoint
  // Optional checkpoint data for the workflow execution
  // This is used to restart the workflow execution from a specific point
  optional Checkpoint from_checkpoint = 4;
}
