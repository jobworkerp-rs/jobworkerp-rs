syntax = "proto3";

package jobworkerp.runner;

message DockerArgs {
    /// The name of the image to use when creating the container (valid only for DockerRunner)
    optional string image = 1;

    /// User-defined key/value metadata.
    // pub labels: Option<HashMap<String, String>>,

    /// The user that commands are run as inside the container.
    optional string user = 2;

    /// An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`
    repeated string exposed_ports = 3;

    /// A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
    repeated string env = 4;

    /// Command to run specified as a string or an array of strings.
    repeated string cmd = 5;

    /// Command is already escaped (Windows only)
    optional bool args_escaped = 6;

    /// An object mapping mount point paths inside the container to empty objects.
    repeated string volumes = 7;

    /// The working directory for commands to run in.
    optional string working_dir = 8;

    /// The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
    repeated string entrypoint = 9;

    /// Disable networking for the container.
    optional bool network_disabled = 10;

    /// MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.
    optional string mac_address = 11;

    /// Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
    repeated string shell = 12;
}

