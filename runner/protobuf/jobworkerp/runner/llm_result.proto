syntax = "proto3";
package jobworkerp.runner;

// Container for various LLM response formats
message LLMResult {
  // Tool/function call requested by the LLM
  message ToolCallResponse {
    string id = 1;
    string type = 2; // Usually "function"
    string function_name = 3;
    string function_arguments = 4; // JSON-formatted
  }

  // Token probability information for alternatives
  message TopLogprob {
    uint32 token = 1;
    float logprob = 2;
    optional string bytes = 3;
  }

  enum Role {
    USER = 0;
    ASSISTANT = 1;
    SYSTEM = 2;
    TOOL = 3;
    CUSTOM = 4;
  }

  // Basic message structure in a chat completion response
  message ResponseMessage {
    optional string content = 1;
    Role role = 2; // "assistant", "system", "user", etc.
    repeated ToolCallResponse tool_calls = 3;
  }

  // Incremental updates for streaming responses
  message Delta {
    optional string content = 1;
    Role role = 2;
    repeated ToolCallResponse tool_calls = 3;
  }

  // Probability information for token generation
  message ResponseLogprob {
    string token = 1;
    float logprob = 2;
    optional bytes bytes = 3;
    repeated TopLogprob top_logprobs = 4;
  }

  // Collection of token probability information
  message Logprobs { repeated ResponseLogprob content = 1; }

  // Reason why the LLM stopped generating content
  enum FinishReason {
    UNKNOWN = 0;
    STOP = 1; // Stopped on a stop token or naturally
    LENGTH = 2;
    CANCELED = 3;
    GENERATED_IMAGE = 4;
  }

  // Single completion option in a response
  message Choice {
    FinishReason finish_reason = 1;
    uint32 index = 2;
    ResponseMessage message = 3;
    optional Logprobs logprobs = 4;
  }

  // Single chunk in a streaming response
  message ChunkChoice {
    optional FinishReason finish_reason = 1;
    uint32 index = 2;
    Delta delta = 3;
    optional ResponseLogprob logprobs = 4;
  }

  // Usage statistics for a request
  message Usage {
    uint32 completion_tokens = 1;
    uint32 prompt_tokens = 2;
    uint32 total_tokens = 3;
    float avg_tok_per_sec = 4;
    float avg_prompt_tok_per_sec = 5;
    float avg_compl_tok_per_sec = 6;
    float total_time_sec = 7;
    float total_prompt_time_sec = 8;
    float total_completion_time_sec = 9;
  }

  // Chat completion response format
  message ChatCompletionResponse {
    string id = 1;
    repeated Choice choices = 2;
    uint64 created = 3;
    string model = 4;
    string system_fingerprint = 5;
    string object = 6; // Usually "chat.completion"
    Usage usage = 7;
  }

  // Streaming chat completion chunk
  message ChatCompletionChunkResponse {
    string id = 1;
    repeated ChunkChoice choices = 2;
    uint64 created = 3;
    string model = 4;
    string system_fingerprint = 5;
    string object = 6; // Usually "chat.completion.chunk"
    optional Usage usage = 7;
  }

  // Completion choice (non-chat format)
  message CompletionChoice {
    string text = 1;
    uint32 index = 2;
    bool has_logprobs = 3;
    FinishReason finish_reason = 4;
  }

  // Streaming completion chunk
  message CompletionChunkChoice {
    string text = 1;
    uint32 index = 2;
    optional ResponseLogprob logprobs = 3;
    optional FinishReason finish_reason = 4;
  }

  // Standard completion response
  message CompletionResponse {
    string id = 1;
    repeated CompletionChoice choices = 2;
    uint64 created = 3;
    string model = 4;
    string system_fingerprint = 5;
    string object = 6; // Usually "completion"
    Usage usage = 7;
  }

  // Streaming completion response
  message CompletionChunkResponse {
    string id = 1;
    repeated CompletionChunkChoice choices = 2;
    uint64 created = 3;
    string model = 4;
    string system_fingerprint = 5;
    string object = 6; // Usually "completion.chunk"
  }

  // Image generation result
  message ImageChoice {
    optional string url = 1;
    optional string b64_json = 2;
  }

  // Image generation response
  message ImageGenerationResponse {
    uint64 created = 1;
    repeated ImageChoice data = 2;
  }

  // Raw tensor and token data
  message RawResponse {
    repeated bytes logits_chunks = 1;
    repeated uint32 tokens = 2;
  }

  // Main response type container
  oneof result {
    ChatCompletionResponse chat_completion = 1;
    ChatCompletionChunkResponse chat_completion_chunk = 2;
    CompletionResponse completion = 3;
    CompletionChunkResponse completion_chunk = 4;
    ImageGenerationResponse image_generation = 5;
    RawResponse raw = 6;
  }
}