{
  "$id": "https://serverlessworkflow.io/schemas/1.0.0/workflow.yaml",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "WorkflowSchema",
  "description": "Workflow schema supporting job execution with functions and tools.\nRuntime expressions are supported in fields marked in descriptions: - jq syntax: ${.key.subkey} for data access, ${$task.input} for context - liquid syntax: $${..} for templates\nAvailable context variables: - Input data: direct key access - Output data: direct key access   - Context vars: set by task.export, setTask (access via $vars for jq) - Workflow: workflow.id, workflow.definition, workflow.input, workflow.context_variables - Task: task.definition, task.input, task.raw_output, task.output, task.flow_directive",
  "type": "object",
  "required": [
    "document",
    "input",
    "do"
  ],
  "properties": {
    "checkpointing": {
      "type": "object",
      "title": "Checkpoint Config",
      "description": "Checkpoint and restart configuration.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable checkpoint functionality.",
          "default": false
        },
        "storage": {
          "type": "string",
          "enum": [
            "memory",
            "redis"
          ],
          "description": "Storage backend for checkpoints."
        }
      },
      "required": [
        "enabled"
      ]
    },
    "document": {
      "type": "object",
      "title": "Document",
      "description": "Workflow metadata and identification.",
      "additionalProperties": false,
      "properties": {
        "dsl": {
          "type": "string",
          "title": "WorkflowDSL",
          "description": "DSL version used by this workflow. Format: semantic version (e.g. 0.0.1).",
          "default": "0.0.1"
        },
        "namespace": {
          "type": "string",
          "title": "WorkflowNamespace",
          "description": "Workflow namespace. Format: alphanumeric with hyphens, max 63 chars.",
          "default": "default"
        },
        "name": {
          "type": "string",
          "title": "WorkflowName",
          "description": "Workflow name. Format: alphanumeric with hyphens, max 63 chars."
        },
        "version": {
          "type": "string",
          "title": "WorkflowVersion",
          "description": "Workflow semantic version. Format: semantic version (e.g. 0.0.1).",
          "default": "0.0.1"
        },
        "title": {
          "type": "string",
          "title": "WorkflowTitle",
          "description": "Workflow title."
        },
        "summary": {
          "type": "string",
          "title": "WorkflowSummary",
          "description": "Workflow summary in Markdown format."
        },
        "tags": {
          "type": "object",
          "title": "WorkflowTags",
          "description": "Key/value tags for workflow classification.",
          "additionalProperties": true
        },
        "metadata": {
          "type": "object",
          "title": "WorkflowMetadata",
          "description": "Additional workflow metadata.",
          "additionalProperties": true
        }
      },
      "required": [
        "dsl",
        "namespace",
        "name",
        "version"
      ]
    },
    "input": {
      "$ref": "#/$defs/input",
      "title": "Input",
      "description": "Workflow input configuration."
    },
    "do": {
      "$ref": "#/$defs/taskList_L0",
      "title": "Do",
      "description": "Tasks to execute in this workflow."
    },
    "output": {
      "$ref": "#/$defs/output",
      "title": "Output",
      "description": "Workflow output configuration."
    }
  },
  "$defs": {
    "taskList_L0": {
      "title": "TaskList_L0",
      "description": "Ordered list of named tasks (Level 0).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L0",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L0"
        }
      }
    },
    "taskList_L1": {
      "title": "TaskList_L1",
      "description": "Ordered list of named tasks (Level 1).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L1",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L1"
        }
      }
    },
    "taskList_L2": {
      "title": "TaskList_L2",
      "description": "Ordered list of named tasks (Level 2).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L2",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L2"
        }
      }
    },
    "taskList_L3": {
      "title": "TaskList_L3",
      "description": "Ordered list of named tasks (Level 3).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L3",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L3"
        }
      }
    },
    "taskList_L4": {
      "title": "TaskList_L4",
      "description": "Ordered list of named tasks (Level 4).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L4",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L4"
        }
      }
    },
    "taskList_L5": {
      "title": "TaskList_L5",
      "description": "Ordered list of named tasks (Level 5).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L5",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L5"
        }
      }
    },
    "taskList_L6": {
      "title": "TaskList_L6",
      "description": "Ordered list of named tasks (Level 6).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L6",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L6"
        }
      }
    },
    "taskList_L7": {
      "title": "TaskList_L7",
      "description": "Ordered list of named tasks (Level 7).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L7",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task_L7"
        }
      }
    },
    "taskList_L8": {
      "title": "TaskList_L8",
      "description": "Ordered list of named tasks (Level 8 - Leaf level).",
      "type": "array",
      "items": {
        "type": "object",
        "title": "TaskItem_L8",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "oneOf": [
            {"$ref": "#/$defs/runTask"},
            {"$ref": "#/$defs/setTask"},
            {"$ref": "#/$defs/waitTask"},
            {"$ref": "#/$defs/raiseTask"}
          ]
        }
      }
    },
    "taskBase": {
      "type": "object",
      "title": "TaskBase",
      "description": "Base properties inherited by all task types.",
      "properties": {
        "if": {
          "type": "string",
          "title": "TaskBaseIf",
          "description": "Runtime expression to conditionally execute this task."
        },
        "input": {
          "$ref": "#/$defs/input",
          "title": "TaskBaseInput",
          "description": "Task input configuration."
        },
        "output": {
          "$ref": "#/$defs/output",
          "title": "TaskBaseOutput",
          "description": "Task output configuration."
        },
        "export": {
          "$ref": "#/$defs/export",
          "title": "TaskBaseExport",
          "description": "Export task output to workflow context."
        },
        "timeout": {
          "title": "TaskTimeout",
          "oneOf": [
            {
              "$ref": "#/$defs/timeout",
              "title": "TaskTimeoutDefinition",
              "description": "Task timeout configuration."
            },
            {
              "type": "string",
              "title": "TaskTimeoutReference",
              "description": "Reference to named timeout configuration."
            }
          ]
        },
        "then": {
          "$ref": "#/$defs/flowDirective",
          "title": "TaskBaseThen",
          "description": "Flow control directive executed after task completion."
        },
        "metadata": {
          "type": "object",
          "title": "TaskMetadata",
          "description": "Additional task metadata.",
          "additionalProperties": true
        },
        "checkpoint": {
          "type": "boolean",
          "title": "Checkpoint",
          "description": "Save workflow state after this task for checkpoint/restart.",
          "default": false
        }
      }
    },
    "task_L0": {
      "title": "Task_L0",
      "description": "Single unit of work within a workflow (Level 0).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L0"},
        {"$ref": "#/$defs/forTask_L0"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L0"},
        {"$ref": "#/$defs/tryTask_L0"},
        {"$ref": "#/$defs/doTask_L0"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L1": {
      "title": "Task_L1",
      "description": "Single unit of work within a workflow (Level 1).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L1"},
        {"$ref": "#/$defs/forTask_L1"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L1"},
        {"$ref": "#/$defs/tryTask_L1"},
        {"$ref": "#/$defs/doTask_L1"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L2": {
      "title": "Task_L2",
      "description": "Single unit of work within a workflow (Level 2).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L2"},
        {"$ref": "#/$defs/forTask_L2"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L2"},
        {"$ref": "#/$defs/tryTask_L2"},
        {"$ref": "#/$defs/doTask_L2"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L3": {
      "title": "Task_L3",
      "description": "Single unit of work within a workflow (Level 3).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L3"},
        {"$ref": "#/$defs/forTask_L3"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L3"},
        {"$ref": "#/$defs/tryTask_L3"},
        {"$ref": "#/$defs/doTask_L3"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L4": {
      "title": "Task_L4",
      "description": "Single unit of work within a workflow (Level 4).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L4"},
        {"$ref": "#/$defs/forTask_L4"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L4"},
        {"$ref": "#/$defs/tryTask_L4"},
        {"$ref": "#/$defs/doTask_L4"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L5": {
      "title": "Task_L5",
      "description": "Single unit of work within a workflow (Level 5).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L5"},
        {"$ref": "#/$defs/forTask_L5"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L5"},
        {"$ref": "#/$defs/tryTask_L5"},
        {"$ref": "#/$defs/doTask_L5"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L6": {
      "title": "Task_L6",
      "description": "Single unit of work within a workflow (Level 6).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L6"},
        {"$ref": "#/$defs/forTask_L6"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L6"},
        {"$ref": "#/$defs/tryTask_L6"},
        {"$ref": "#/$defs/doTask_L6"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "task_L7": {
      "title": "Task_L7",
      "description": "Single unit of work within a workflow (Level 7).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/forkTask_L7"},
        {"$ref": "#/$defs/forTask_L7"},
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/switchTask_L7"},
        {"$ref": "#/$defs/tryTask_L7"},
        {"$ref": "#/$defs/doTask_L7"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "leafTask": {
      "title": "LeafTask",
      "description": "Leaf level task (no nested tasks allowed).",
      "additionalProperties": false,
      "oneOf": [
        {"$ref": "#/$defs/raiseTask"},
        {"$ref": "#/$defs/runTask"},
        {"$ref": "#/$defs/setTask"},
        {"$ref": "#/$defs/waitTask"}
      ]
    },
    "raiseTask": {
      "type": "object",
      "$ref": "#/$defs/taskBase",
      "title": "RaiseTask",
      "description": "Trigger and propagate errors intentionally.",
      "required": [
        "raise"
      ],
      "additionalProperties": false,
      "properties": {
        "raise": {
          "type": "object",
          "title": "RaiseTaskConfiguration",
          "description": "Error to raise.",
          "additionalProperties": false,
          "properties": {
            "error": {
              "title": "RaiseTaskError",
              "oneOf": [
                {
                  "$ref": "#/$defs/error",
                  "title": "RaiseErrorDefinition",
                  "description": "Inline error definition."
                },
                {
                  "type": "string",
                  "title": "RaiseErrorReference",
                  "description": "Reference to named error definition."
                }
              ]
            }
          },
          "required": [
            "error"
          ]
        }
      }
    },
    "runTask": {
      "type": "object",
      "$ref": "#/$defs/taskBase",
      "title": "RunTask",
      "description": "Execute external processes, commands, or workflows.",
      "required": [
        "run"
      ],
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "object",
          "title": "RunTaskConfiguration",
          "description": "Process execution configuration.",
          "additionalProperties": false,
          "properties": {
            "await": {
              "type": "boolean",
              "default": true,
              "title": "AwaitProcessCompletion",
              "description": "Wait for process completion before continuing."
            },
            "return": {
              "type": "string",
              "title": "ProcessReturnType",
              "description": "Process output type to return.",
              "enum": [
                "stdout",
                "stderr",
                "code",
                "all",
                "none"
              ],
              "default": "stdout"
            }
          },
          "oneOf": [
            {
              "$ref": "#/$defs/runWorker"
            },
            {
              "$ref": "#/$defs/runRunner"
            },
            {
              "$ref": "#/$defs/runFunction"
            }
          ]
        }
      }
    },
    "runRunner": {
      "type": "object",
      "title": "RunRunner",
      "description": "Execute using a runner configuration.",
      "required": [
        "runner"
      ],
      "properties": {
        "runner": {
          "type": "object",
          "title": "RunJobRunner",
          "description": "Executes a job using a specified runner.",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "title": "RunnerName",
              "description": "The name of the runner (runtime environment) that executes the job (e.g., COMMAND, HTTP, GRPC, PYTHON_COMMAND, LLM_CHAT, MCP server names, plugin names, etc.)"
            },
            "settings": {
              "type": "object",
              "title": "InitializeSettings",
              "description": "The initialization settings, if any. Runtime expressions can be used to transform each value (not keys, no mixed plain text)."
            },
            "options": {
              "$ref": "#/$defs/workerOptions"
            },
            "arguments": {
              "type": "object",
              "title": "JobArguments",
              "description": "A key/value mapping of arguments to use when running the runner as job. Runtime expressions are supported for value transformation.",
              "additionalProperties": true
            }
          },
          "required": [
            "name",
            "arguments"
          ]
        }
      },
      "additionalProperties": false
    },
    "workerOptions": {
      "type": "object",
      "title": "WorkerOptions",
      "description": "The options to use when running the worker.",
      "properties": {
        "channel": {
          "type": "string",
          "title": "Channel",
          "description": "The channel to use when running the worker (controls execution concurrency)."
        },
        "withBackup": {
          "type": "boolean",
          "title": "WithBackup",
          "description": "Whether to backup the enqueued job to the database during queueing and execution."
        },
        "storeSuccess": {
          "type": "boolean",
          "title": "StoreSuccessResult",
          "description": "Whether to store successful results in the database."
        },
        "storeFailure": {
          "type": "boolean",
          "title": "StoreFailureResult",
          "description": "Whether to store failure results in the database."
        },
        "useStatic": {
          "type": "boolean",
          "title": "UseStaticWorker",
          "description": "Whether to use a static worker (persisted in database with pooled initialization)."
        },
        "retry": {
          "$ref": "#/$defs/retryPolicy",
          "title": "RetryPolicyDefinition",
          "description": "The retry policy to use, if any, when catching errors."
        },
        "broadcastResults": {
          "type": "boolean",
          "title": "BroadcastResultsToListener",
          "description": "Whether to broadcast results to listeners."
        }
      }
    },
    "runWorker": {
      "type": "object",
      "title": "RunWorker",
      "description": "Execute using a worker configuration.",
      "required": [
        "worker"
      ],
      "properties": {
        "worker": {
          "type": "object",
          "title": "RunJobWorker",
          "description": "Executes a job using a specified worker (configured runner with settings and options).",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "title": "WorkerName",
              "description": "The name of the worker that executes this job (user-defined)."
            },
            "arguments": {
              "type": "object",
              "title": "FunctionArguments",
              "description": "A key/value mapping of arguments to use when running the function. Runtime expressions are supported for value transformation.",
              "additionalProperties": true
            }
          },
          "required": [
            "name",
            "arguments"
          ]
        }
      },
      "additionalProperties": false
    },
    "runFunction": {
      "type": "object",
      "title": "RunFunction",
      "description": "Execute using a function configuration.",
      "required": [
        "function"
      ],
      "properties": {
        "function": {
          "type": "object",
          "title": "RunJobFunction",
          "description": "Executes a job using a specified function(runner or worker).",
          "additionalProperties": false,
          "oneOf": [
            {
              "type": "object",
              "title": "RunnerFunction",
              "description": "Execute using a runner with optional settings",
              "properties": {
                "runnerName": {
                  "type": "string",
                  "description": "The name of the runner that executes job"
                },
                "settings": {
                  "type": "object",
                  "description": "The initialization settings JSON, if any. (ref. jobworkerp.data.RunnerData.runner_settings_proto schema) Runtime expression can be used to transform each value (not keys, no mixed plain text)."
                },
                "options": {
                  "$ref": "#/$defs/workerOptions"
                },
                "arguments": {
                  "type": "object",
                  "description": "A key/value mapping of arguments JSON (ref. jobworkerp.data.RunnerData.job_args_proto schema) to use when running the function. Runtime expressions are supported for value transformation.",
                  "additionalProperties": true
                }
              },
              "required": [
                "runnerName",
                "arguments"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "title": "WorkerFunction",
              "description": "Execute using a pre-configured worker",
              "properties": {
                "workerName": {
                  "type": "string",
                  "description": "The name of the worker that executes job"
                },
                "arguments": {
                  "type": "object",
                  "description": "A key/value mapping of arguments JSON to use when running the function. Runtime expressions are supported for value transformation.",
                  "additionalProperties": true
                }
              },
              "required": [
                "workerName",
                "arguments"
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "setTask": {
      "type": "object",
      "$ref": "#/$defs/taskBase",
      "title": "SetTask",
      "description": "Set data as context variables.",
      "required": [
        "set"
      ],
      "additionalProperties": false,
      "properties": {
        "set": {
          "type": "object",
          "title": "SetTaskConfiguration",
          "description": "Data to set as context variables.",
          "minProperties": 1,
          "additionalProperties": true
        }
      }
    },
    "waitTask": {
      "type": "object",
      "$ref": "#/$defs/taskBase",
      "title": "WaitTask",
      "description": "Pause workflow execution for specified duration.",
      "required": [
        "wait"
      ],
      "additionalProperties": false,
      "properties": {
        "wait": {
          "$ref": "#/$defs/duration",
          "title": "WaitTaskConfiguration",
          "description": "Duration to wait."
        }
      }
    },
    "flowDirective": {
      "title": "FlowDirective",
      "description": "Control flow directive for workflow execution path.",
      "oneOf": [
        {
          "title": "FlowDirectiveEnum",
          "type": "string",
          "enum": [
            "continue",
            "exit",
            "end"
          ],
          "default": "continue"
        },
        {
          "type": "string",
          "description": "Runtime expression evaluating to target task name."
        }
      ]
    },
    "duration": {
      "oneOf": [
        {
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "properties": {
            "days": {
              "type": "integer",
              "title": "DurationDays",
              "description": "Number of days."
            },
            "hours": {
              "type": "integer",
              "title": "DurationHours",
              "description": "Number of hours."
            },
            "minutes": {
              "type": "integer",
              "title": "DurationMinutes",
              "description": "Number of minutes."
            },
            "seconds": {
              "type": "integer",
              "title": "DurationSeconds",
              "description": "Number of seconds."
            },
            "milliseconds": {
              "type": "integer",
              "title": "DurationMilliseconds",
              "description": "Number of milliseconds."
            }
          },
          "title": "DurationInline",
          "description": "Inline duration specification using individual time units."
        },
        {
          "type": "string",
          "title": "DurationExpression",
          "description": "Duration expressed in ISO 8601 format (e.g. P1DT2H30M)."
        }
      ]
    },
    "error": {
      "type": "object",
      "title": "Error",
      "description": "Error definition.",
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "ErrorType",
          "description": "URI identifying error type.",
          "$ref": "#/$defs/uriTemplate"
        },
        "status": {
          "type": "integer",
          "title": "ErrorStatus",
          "description": "HTTP status code for this error."
        },
        "instance": {
          "title": "ErrorInstance",
          "description": "JSON Pointer to error source component.",
          "type": "string",
          "format": "json-pointer"
        },
        "title": {
          "description": "Brief error summary.",
          "title": "ErrorTitle",
          "type": "string"
        },
        "detail": {
          "title": "ErrorDetails",
          "description": "Detailed error explanation.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ]
    },
    "errorFilter": {
      "type": "object",
      "title": "ErrorFilter",
      "description": "Static error filtering configuration. For dynamic filtering, use catch.when property.",
      "minProperties": 1,
      "properties": {
        "type": {
          "type": "string",
          "description": "Filter by error type value."
        },
        "status": {
          "type": "integer",
          "description": "Filter by error status code."
        },
        "instance": {
          "type": "string",
          "description": "Filter by error instance path."
        },
        "title": {
          "type": "string",
          "description": "Filter by error title."
        },
        "details": {
          "type": "string",
          "description": "Filter by error details."
        }
      }
    },
    "uriTemplate": {
      "title": "UriTemplate",
      "anyOf": [
        {
          "title": "LiteralUriTemplate",
          "type": "string",
          "format": "uri-template",
          "description": "URI template with scheme (e.g. http://example.com)."
        }
      ]
    },
    "endpoint": {
      "title": "Endpoint",
      "description": "Endpoint configuration.",
      "oneOf": [
        {
          "$ref": "#/$defs/uriTemplate"
        },
        {
          "title": "EndpointConfiguration",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "uri": {
              "title": "EndpointUri",
              "description": "Endpoint URI.",
              "$ref": "#/$defs/uriTemplate"
            }
          },
          "required": [
            "uri"
          ]
        }
      ]
    },
    "externalResource": {
      "type": "object",
      "title": "ExternalResource",
      "description": "External resource configuration.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "title": "ExternalResourceName",
          "description": "Resource name."
        },
        "endpoint": {
          "$ref": "#/$defs/endpoint",
          "title": "ExternalResourceEndpoint",
          "description": "Resource endpoint."
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "input": {
      "type": "object",
      "title": "Input",
      "description": "Input configuration for workflow or task.",
      "additionalProperties": false,
      "properties": {
        "schema": {
          "$ref": "#/$defs/schema",
          "title": "InputSchema",
          "description": "Schema for input validation."
        },
        "from": {
          "title": "InputFrom",
          "description": "Runtime expression to transform input data.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ]
        }
      }
    },
    "output": {
      "type": "object",
      "title": "Output",
      "description": "Output configuration for workflow or task.",
      "additionalProperties": false,
      "properties": {
        "schema": {
          "$ref": "#/$defs/schema",
          "title": "OutputSchema",
          "description": "Schema for output validation."
        },
        "as": {
          "title": "OutputAs",
          "description": "Runtime expression to transform output data.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ]
        }
      }
    },
    "export": {
      "type": "object",
      "title": "Export",
      "description": "Export configuration for context variables.",
      "additionalProperties": false,
      "properties": {
        "schema": {
          "$ref": "#/$defs/schema",
          "title": "ExportSchema",
          "description": "Schema for context validation."
        },
        "as": {
          "title": "ExportAs",
          "description": "Runtime expression to export data to context.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ]
        }
      }
    },
    "retryPolicy": {
      "type": "object",
      "title": "RetryPolicy",
      "description": "Retry policy configuration.",
      "additionalProperties": false,
      "properties": {
        "delay": {
          "$ref": "#/$defs/duration",
          "title": "RetryDelay",
          "description": "Delay between retry attempts."
        },
        "backoff": {
          "type": "object",
          "title": "RetryBackoff",
          "description": "Backoff strategy for retry durations.",
          "additionalProperties": false,
          "oneOf": [
            {
              "title": "ConstantBackoff",
              "properties": {
                "constant": {
                  "type": "object",
                  "description": "Constant backoff configuration (empty object)."
                }
              },
              "required": [
                "constant"
              ]
            },
            {
              "title": "ExponentialBackOff",
              "properties": {
                "exponential": {
                  "type": "object",
                  "description": "Exponential backoff configuration (empty object)."
                }
              },
              "required": [
                "exponential"
              ]
            },
            {
              "title": "LinearBackoff",
              "properties": {
                "linear": {
                  "type": "object",
                  "description": "Linear backoff configuration (empty object)."
                }
              },
              "required": [
                "linear"
              ]
            }
          ]
        },
        "limit": {
          "type": "object",
          "title": "RetryLimit",
          "additionalProperties": false,
          "properties": {
            "attempt": {
              "type": "object",
              "title": "RetryLimitAttempt",
              "additionalProperties": false,
              "properties": {
                "count": {
                  "type": "integer",
                  "title": "RetryLimitAttemptCount",
                  "description": "Maximum retry attempts."
                },
                "duration": {
                  "$ref": "#/$defs/duration",
                  "title": "RetryLimitAttemptDuration",
                  "description": "Maximum duration per retry attempt."
                }
              }
            }
          },
          "description": "Retry limits configuration."
        }
      }
    },
    "schema": {
      "type": "object",
      "title": "Schema",
      "description": "Schema definition configuration.",
      "additionalProperties": false,
      "properties": {
        "format": {
          "type": "string",
          "default": "json",
          "title": "SchemaFormat",
          "description": "Schema format (defaults to 'json'). Use `{format}:{version}` for versioning."
        }
      },
      "oneOf": [
        {
          "title": "SchemaInline",
          "properties": {
            "document": {
              "description": "Inline schema definition."
            }
          },
          "required": [
            "document"
          ]
        },
        {
          "title": "SchemaExternal",
          "properties": {
            "resource": {
              "$ref": "#/$defs/externalResource",
              "title": "SchemaExternalResource",
              "description": "External schema resource."
            }
          },
          "required": [
            "resource"
          ]
        }
      ]
    },
    "timeout": {
      "type": "object",
      "title": "Timeout",
      "description": "Timeout configuration.",
      "additionalProperties": false,
      "properties": {
        "after": {
          "$ref": "#/$defs/duration",
          "title": "TimeoutAfter",
          "description": "Timeout duration."
        }
      },
      "required": [
        "after"
      ]
    },
    "processResult": {
      "type": "object",
      "title": "ProcessResult",
      "description": "Process execution result when return type is 'all'.",
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "title": "ProcessExitCode",
          "description": "Process exit code."
        },
        "stdout": {
          "type": "string",
          "title": "ProcessStandardOutput",
          "description": "Process STDOUT content."
        },
        "stderr": {
          "type": "string",
          "title": "ProcessStandardError",
          "description": "Process STDERR content."
        }
      },
      "required": [
        "code",
        "stdout",
        "stderr"
      ]
    },
    "plainString": {
      "type": "string",
      "title": "PlainString",
      "description": "Plain string without runtime expressions (no ${} syntax)."
    }
  }
}
