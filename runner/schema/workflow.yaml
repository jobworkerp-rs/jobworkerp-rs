# original data
# convert to json and rust:
#     yq --output-format=json runner/schema/workflow.yaml > runner/schema/workflow.json
#     cargo typify runner/schema/workflow.json
#
$id: https://serverlessworkflow.io/schemas/1.0.0/workflow.yaml
$schema: https://json-schema.org/draft/2020-12/schema
title: WorkflowSchema
description: Partial Serverless Workflow DSL (add function task) - Workflow Schema.
type: object
required: [document, input, do]
properties:
  document:
    type: object
    title: Document
    description: Documents the workflow.
    unevaluatedProperties: false
    properties:
      dsl:
        type: string
        pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        title: WorkflowDSL
        description: The version of the DSL used by the workflow.
        default: "0.0.1"
      namespace:
        type: string
        pattern: ^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$
        title: WorkflowNamespace
        description: The workflow's namespace.
        default: "default"
      name:
        type: string
        pattern: ^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$
        title: WorkflowName
        description: The workflow's name.
      version:
        type: string
        pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        title: WorkflowVersion
        description: The workflow's semantic version.
        default: "0.0.1"
      title:
        type: string
        title: WorkflowTitle
        description: The workflow's title.
      summary:
        type: string
        title: WorkflowSummary
        description: The workflow's Markdown summary.
      tags:
        type: object
        title: WorkflowTags
        description: A key/value mapping of the workflow's tags, if any.
        additionalProperties: true
      metadata:
        type: object
        title: WorkflowMetadata
        description: Holds additional information about the workflow.
        additionalProperties: true
    required: [dsl, namespace, name, version]
  input:
    $ref: "#/$defs/input"
    title: Input
    description: Configures the workflow's input.
  do:
    $ref: "#/$defs/taskList"
    title: Do
    description: Defines the task(s) the workflow must perform.
  output:
    $ref: "#/$defs/output"
    title: Output
    description: Configures the workflow's output.
$defs:
  taskList:
    title: TaskList
    description: List of named tasks to perform.
    type: array
    items:
      type: object
      title: TaskItem
      minProperties: 1
      maxProperties: 1
      additionalProperties:
        $ref: "#/$defs/task"
  taskBase:
    type: object
    title: TaskBase
    description: An object inherited by all tasks.
    properties:
      if:
        type: string
        title: TaskBaseIf
        description: A runtime expression, if any, used to determine whether or not the task should be run.
      input:
        $ref: "#/$defs/input"
        title: TaskBaseInput
        description: Configure the task's input.
      output:
        $ref: "#/$defs/output"
        title: TaskBaseOutput
        description: Configure the task's output.
      export:
        $ref: "#/$defs/export"
        title: TaskBaseExport
        description: Export task output to context.
      timeout:
        title: TaskTimeout
        oneOf:
          - $ref: "#/$defs/timeout"
            title: TaskTimeoutDefinition
            description: The task's timeout configuration, if any.
          - type: string
            title: TaskTimeoutReference
            description: The name of the task's timeout, if any.
      then:
        $ref: "#/$defs/flowDirective"
        title: TaskBaseThen
        description: The flow directive to be performed upon completion of the task.
      metadata:
        type: object
        title: TaskMetadata
        description: Holds additional information about the task.
        additionalProperties: true
  task:
    title: Task
    description: A discrete unit of work that contributes to achieving the overall objectives defined by the workflow.
    unevaluatedProperties: false
    oneOf:
      - $ref: "#/$defs/callTask"
      - $ref: "#/$defs/doTask"
      - $ref: "#/$defs/forkTask"
      - $ref: "#/$defs/emitTask"
      - $ref: "#/$defs/forTask"
      - $ref: "#/$defs/raiseTask"
      - $ref: "#/$defs/runTask"
      - $ref: "#/$defs/setTask"
      - $ref: "#/$defs/switchTask"
      - $ref: "#/$defs/tryTask"
      - $ref: "#/$defs/waitTask"
  callTask:
    title: CallTask
    description: Defines the call to perform.
    oneOf:
      - title: CallFunction
        description: Defines the function(runner) call to perform.
        $ref: "#/$defs/taskBase"
        type: object
        unevaluatedProperties: false
        required: [call]
        properties:
          call:
            type: string
            description: The name of the function to call.
          with:
            type: object
            title: FunctionArguments
            description: A name/value mapping of the parameters, if any, to call the function with.
            additionalProperties: true
  forkTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: ForkTask
    description: Allows workflows to execute multiple tasks concurrently and optionally race them against each other, with a single possible winner, which sets the task's output.
    unevaluatedProperties: false
    required: [fork]
    properties:
      fork:
        type: object
        title: ForkTaskConfiguration
        description: The configuration of the branches to perform concurrently.
        unevaluatedProperties: false
        required: [branches]
        properties:
          branches:
            $ref: "#/$defs/taskList"
            title: ForkBranches
          compete:
            type: boolean
            title: ForkCompete
            description: Indicates whether or not the concurrent tasks are racing against each other, with a single possible winner, which sets the composite task's output.
            default: false
  doTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: DoTask
    description: Allows to execute a list of tasks in sequence.
    unevaluatedProperties: false
    required: [do]
    allOf:
      - properties:
          do:
            $ref: "#/$defs/taskList"
            title: DoTaskConfiguration
            description: The configuration of the tasks to perform sequentially.
      - not:
          required: [for]
  emitTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: EmitTask
    description: Allows workflows to publish events to event brokers or messaging systems, facilitating communication and coordination between different components and services.
    required: [emit]
    unevaluatedProperties: false
    properties:
      emit:
        type: object
        title: EmitTaskConfiguration
        description: The configuration of an event's emission.
        unevaluatedProperties: false
        properties:
          event:
            type: object
            title: EmitEventDefinition
            description: The definition of the event to emit.
            properties:
              with:
                $ref: "#/$defs/eventProperties"
                title: EmitEventWith
                description: Defines the properties of event to emit.
                required: [source, type]
            additionalProperties: true
        required: [event]
  forTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: ForTask
    description: Allows workflows to iterate over a collection of items, executing a defined set of subtasks for each item in the collection. This task type is instrumental in handling scenarios such as batch processing, data transformation, and repetitive operations across datasets.
    required: [for, do]
    unevaluatedProperties: false
    properties:
      for:
        type: object
        title: ForTaskConfiguration
        description: The definition of the loop that iterates over a range of values.
        unevaluatedProperties: false
        properties:
          each:
            type: string
            title: ForEach
            description: The name of the variable used to store the current item being enumerated.
            default: item
          in:
            type: string
            title: ForIn
            description: A runtime expression used to get the collection to enumerate.
          at:
            type: string
            title: ForAt
            description: The name of the variable used to store the index of the current item being enumerated.
            default: index
        required: [in]
      while:
        type: string
        title: While
        description: A runtime expression that represents the condition, if any, that must be met for the iteration to continue.
      do:
        $ref: "#/$defs/taskList"
        title: ForTaskDo
  raiseTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: RaiseTask
    description: Intentionally triggers and propagates errors.
    required: [raise]
    unevaluatedProperties: false
    properties:
      raise:
        type: object
        title: RaiseTaskConfiguration
        description: The definition of the error to raise.
        unevaluatedProperties: false
        properties:
          error:
            title: RaiseTaskError
            oneOf:
              - $ref: "#/$defs/error"
                title: RaiseErrorDefinition
                description: Defines the error to raise.
              - type: string
                title: RaiseErrorReference
                description: The name of the error to raise
        required: [error]
  runTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: RunTask
    description: Provides the capability to execute external containers, shell commands, scripts, or workflows.
    required: [run]
    unevaluatedProperties: false
    properties:
      run:
        type: object
        title: RunTaskConfiguration
        description: The configuration of the process to execute.
        unevaluatedProperties: false
        properties:
          await:
            type: boolean
            default: true
            title: AwaitProcessCompletion
            description: Whether to await the process completion before continuing.
          return:
            type: string
            title: ProcessReturnType
            description: Configures the output of the process.
            enum: [stdout, stderr, code, all, none]
            default: stdout
        oneOf:
          - title: RunFunction
            description: Executes a function using a specified runtime environment (runner)
            properties:
              function:
                type: object
                title: Function
                description: The configuration of the function to run by runner(runtime).
                unevaluatedProperties: false
                properties:
                  runnerName:
                    type: string
                    title: RunnerName
                    description: The name of the runtime environment that executes this function (e.g., COMMAND, HTTP, GRPC, PYTHON_COMMAND)
                  settings:
                    type: object
                    title: InitializeSettings
                    description: The initialization settings, if any. Jq expressions (${..}) or Liquid templates ($${..}) can be used to transform each value (not keys, no mixed plain text).
                  options:
                    type: object
                    title: FunctionOptions
                    description: The options to use when running the configured function.
                    properties:
                      channel:
                        type: string
                        title: FunctionChannel
                        description: The channel to use when running the function. (Channel controls execution concurrency)
                      withBackup:
                        type: boolean
                        title: FunctionWithBackup
                        description: Whether to backup the function call (queue) to database when queueing and running the function.
                      storeSuccess:
                        type: boolean
                        title: StoreSuccessResult
                        description: Whether to store successful results to database.
                      storeFailure:
                        type: boolean
                        title: StoreFailureResult
                        description: Whether to store failure results to database.
                      useStatic:
                        type: boolean
                        title: UseStaticFunction
                        description: Whether to use a static function (persist in database, pool initialized function).
                      retry:
                        $ref: "#/$defs/retryPolicy"
                        title: RetryPolicyDefinition
                        description: The retry policy to use, if any, when catching errors.
                      broadcastResultsToListener:
                        type: boolean
                        title: BroadcastResultsToListener
                        description: Whether to broadcast results to listeners.
                  arguments:
                    type: object
                    title: FunctionArguments
                    description: A key/value mapping of arguments to use when running the function. Jq expression (${..}) or Liquid template ($${..}) is used to transform the arguments.
                    additionalProperties: true
                required: [runnerName, arguments]
            required: [function]
  setTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: SetTask
    description: A task used to set data.
    required: [set]
    unevaluatedProperties: false
    properties:
      set:
        type: object
        title: SetTaskConfiguration
        description: The data to set.
        minProperties: 1
        additionalProperties: true
  switchTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: SwitchTask
    description: Enables conditional branching within workflows, allowing them to dynamically select different paths based on specified conditions or criteria.
    required: [switch]
    unevaluatedProperties: false
    properties:
      switch:
        type: array
        title: SwitchTaskConfiguration
        description: The definition of the switch to use.
        minItems: 1
        items:
          type: object
          title: SwitchItem
          minProperties: 1
          maxProperties: 1
          additionalProperties:
            type: object
            title: SwitchCase
            description: The definition of a case within a switch task, defining a condition and corresponding tasks to execute if the condition is met.
            unevaluatedProperties: false
            required: [then]
            properties:
              when:
                type: string
                title: SwitchCaseCondition
                description: A runtime expression used to determine whether or not the case matches.
              then:
                $ref: "#/$defs/flowDirective"
                title: SwitchCaseOutcome
                description: The flow directive to execute when the case matches.
  tryTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: TryTask
    description: Serves as a mechanism within workflows to handle errors gracefully, potentially retrying failed tasks before proceeding with alternate ones.
    required: [try, catch]
    unevaluatedProperties: false
    properties:
      try:
        $ref: "#/$defs/taskList"
        title: TryTaskConfiguration
        description: The task(s) to perform.
      catch:
        type: object
        title: TryTaskCatch
        description: The object used to define the errors to catch.
        unevaluatedProperties: false
        properties:
          errors:
            type: object
            title: CatchErrors
            properties:
              with:
                $ref: "#/$defs/errorFilter"
            description: static error filter
          as:
            type: string
            title: CatchAs
            description: The name of the runtime expression variable to save the error as. Defaults to 'error'.
          when:
            type: string
            title: CatchWhen
            description: A runtime expression used to determine whether to catch the filtered error.
          exceptWhen:
            type: string
            title: CatchExceptWhen
            description: A runtime expression used to determine whether not to catch the filtered error.
          retry:
            oneOf:
              - $ref: "#/$defs/retryPolicy"
                title: RetryPolicyDefinition
                description: The retry policy to use, if any, when catching errors.
              - type: string
                title: RetryPolicyReference
                description: The name of the retry policy to use, if any, when catching errors.
          do:
            $ref: "#/$defs/taskList"
            title: TryTaskCatchDo
            description: The definition of the task(s) to run when catching an error.
  waitTask:
    type: object
    $ref: "#/$defs/taskBase"
    title: WaitTask
    description: Allows workflows to pause or delay their execution for a specified period of time.
    required: [wait]
    unevaluatedProperties: false
    properties:
      wait:
        $ref: "#/$defs/duration"
        title: WaitTaskConfiguration
        description: The amount of time to wait.
  flowDirective:
    title: FlowDirective
    description: Represents different transition options for a workflow.
    anyOf:
      - title: FlowDirectiveEnum
        type: string
        enum: [continue, exit, end]
        default: continue
      - type: string
  referenceableAuthenticationPolicy:
    type: object
    title: ReferenceableAuthenticationPolicy
    description: Represents a referenceable authentication policy.
    unevaluatedProperties: false
    oneOf:
      - title: AuthenticationPolicyReference
        description: The reference of the authentication policy to use.
        properties:
          use:
            type: string
            minLength: 1
            title: ReferenceableAuthenticationPolicyName
            description: The name of the authentication policy to use.
        required: [use]
      - $ref: "#/$defs/authenticationPolicy"
  secretBasedAuthenticationPolicy:
    type: object
    title: SecretBasedAuthenticationPolicy
    description: Represents an authentication policy based on secrets.
    unevaluatedProperties: false
    properties:
      use:
        type: string
        minLength: 1
        title: SecretBasedAuthenticationPolicyName
        description: The name of the authentication policy to use.
    required: [use]
  authenticationPolicy:
    type: object
    title: AuthenticationPolicy
    description: Defines an authentication policy.
    oneOf:
      - title: BasicAuthenticationPolicy
        description: Use basic authentication.
        properties:
          basic:
            type: object
            title: BasicAuthenticationPolicyConfiguration
            description: The configuration of the basic authentication policy.
            unevaluatedProperties: false
            oneOf:
              - title: BasicAuthenticationProperties
                description: Inline configuration of the basic authentication policy.
                properties:
                  username:
                    type: string
                    description: The username to use.
                  password:
                    type: string
                    description: The password to use.
                required: [username, password]
              - $ref: "#/$defs/secretBasedAuthenticationPolicy"
                title: BasicAuthenticationPolicySecret
                description: Secret based configuration of the basic authentication policy.
        required: [basic]
      - title: BearerAuthenticationPolicy
        description: Use bearer authentication.
        properties:
          bearer:
            type: object
            title: BearerAuthenticationPolicyConfiguration
            description: The configuration of the bearer authentication policy.
            unevaluatedProperties: false
            oneOf:
              - title: BearerAuthenticationProperties
                description: Inline configuration of the bearer authentication policy.
                properties:
                  token:
                    type: string
                    description: The bearer token to use.
                required: [token]
              - $ref: "#/$defs/secretBasedAuthenticationPolicy"
                title: BearerAuthenticationPolicySecret
                description: Secret based configuration of the bearer authentication policy.
        required: [bearer]
      - title: DigestAuthenticationPolicy
        description: Use digest authentication.
        properties:
          digest:
            type: object
            title: DigestAuthenticationPolicyConfiguration
            description: The configuration of the digest authentication policy.
            unevaluatedProperties: false
            oneOf:
              - title: DigestAuthenticationProperties
                description: Inline configuration of the digest authentication policy.
                properties:
                  username:
                    type: string
                    description: The username to use.
                  password:
                    type: string
                    description: The password to use.
                required: [username, password]
              - $ref: "#/$defs/secretBasedAuthenticationPolicy"
                title: DigestAuthenticationPolicySecret
                description: Secret based configuration of the digest authentication policy.
        required: [digest]
      - title: OAuth2AuthenticationPolicy
        description: Use OAuth2 authentication.
        properties:
          oauth2:
            type: object
            title: OAuth2AuthenticationPolicyConfiguration
            description: The configuration of the OAuth2 authentication policy.
            unevaluatedProperties: false
            oneOf:
              - type: object
                title: OAuth2ConnectAuthenticationProperties
                description: The inline configuration of the OAuth2 authentication policy.
                unevaluatedProperties: false
                allOf:
                  - $ref: "#/$defs/oauth2AuthenticationProperties"
                  - type: object
                    properties:
                      endpoints:
                        type: object
                        title: OAuth2AuthenticationPropertiesEndpoints
                        description: The endpoint configurations for OAuth2.
                        properties:
                          token:
                            type: string
                            format: uri-template
                            default: /oauth2/token
                            title: OAuth2TokenEndpoint
                            description: The relative path to the token endpoint. Defaults to `/oauth2/token`.
                          revocation:
                            type: string
                            format: uri-template
                            default: /oauth2/revoke
                            title: OAuth2RevocationEndpoint
                            description: The relative path to the revocation endpoint. Defaults to `/oauth2/revoke`.
                          introspection:
                            type: string
                            format: uri-template
                            default: /oauth2/introspect
                            title: OAuth2IntrospectionEndpoint
                            description: The relative path to the introspection endpoint. Defaults to `/oauth2/introspect`.
              - $ref: "#/$defs/secretBasedAuthenticationPolicy"
                title: OAuth2AuthenticationPolicySecret
                description: Secret based configuration of the OAuth2 authentication policy.
        required: [oauth2]
      - title: OpenIdConnectAuthenticationPolicy
        description: Use OpenIdConnect authentication.
        properties:
          oidc:
            type: object
            title: OpenIdConnectAuthenticationPolicyConfiguration
            description: The configuration of the OpenIdConnect authentication policy.
            unevaluatedProperties: false
            oneOf:
              - $ref: "#/$defs/oauth2AuthenticationProperties"
                title: OpenIdConnectAuthenticationProperties
                description: The inline configuration of the OpenIdConnect authentication policy.
                unevaluatedProperties: false
              - $ref: "#/$defs/secretBasedAuthenticationPolicy"
                title: OpenIdConnectAuthenticationPolicySecret
                description: Secret based configuration of the OpenIdConnect authentication policy.
        required: [oidc]
  oauth2AuthenticationProperties:
    type: object
    title: OAuth2AutenthicationData
    description: Inline configuration of the OAuth2 authentication policy.
    properties:
      authority:
        $ref: "#/$defs/uriTemplate"
        title: OAuth2AutenthicationDataAuthority
        description: The URI that references the OAuth2 authority to use.
      grant:
        type: string
        enum:
          [
            authorization_code,
            client_credentials,
            password,
            refresh_token,
            "urn:ietf:params:oauth:grant-type:token-exchange",
          ]
        title: OAuth2AutenthicationDataGrant
        description: The grant type to use.
      client:
        type: object
        title: OAuth2AutenthicationDataClient
        description: The definition of an OAuth2 client.
        unevaluatedProperties: false
        properties:
          id:
            type: string
            title: ClientId
            description: The client id to use.
          secret:
            type: string
            title: ClientSecret
            description: The client secret to use, if any.
          assertion:
            type: string
            title: ClientAssertion
            description: A JWT containing a signed assertion with your application credentials.
          authentication:
            type: string
            enum:
              [
                client_secret_basic,
                client_secret_post,
                client_secret_jwt,
                private_key_jwt,
                none,
              ]
            default: client_secret_post
            title: ClientAuthentication
            description: The authentication method to use to authenticate the client.
      request:
        type: object
        title: OAuth2TokenRequest
        description: The configuration of an OAuth2 token request
        properties:
          encoding:
            type: string
            enum: ["application/x-www-form-urlencoded", "application/json"]
            default: "application/x-www-form-urlencoded"
            title: Oauth2TokenRequestEncoding
      issuers:
        type: array
        title: OAuth2Issuers
        description: A list that contains that contains valid issuers that will be used to check against the issuer of generated tokens.
        items:
          type: string
      scopes:
        type: array
        title: OAuth2AutenthicationDataScopes
        description: The scopes, if any, to request the token for.
        items:
          type: string
      audiences:
        type: array
        title: OAuth2AutenthicationDataAudiences
        description: The audiences, if any, to request the token for.
        items:
          type: string
      username:
        type: string
        title: OAuth2AutenthicationDataUsername
        description: The username to use. Used only if the grant type is Password.
      password:
        type: string
        title: OAuth2AutenthicationDataPassword
        description: The password to use. Used only if the grant type is Password.
      subject:
        $ref: "#/$defs/oauth2Token"
        title: OAuth2AutenthicationDataSubject
        description: The security token that represents the identity of the party on behalf of whom the request is being made.
      actor:
        $ref: "#/$defs/oauth2Token"
        title: OAuth2AutenthicationDataActor
        description: The security token that represents the identity of the acting party.
  oauth2Token:
    type: object
    title: OAuth2TokenDefinition
    description: Represents an OAuth2 token.
    unevaluatedProperties: false
    properties:
      token:
        type: string
        title: OAuth2Token
        description: The security token to use.
      type:
        type: string
        title: OAuth2TokenType
        description: The type of the security token to use.
    required: [token, type]
  duration:
    oneOf:
      - type: object
        minProperties: 1
        unevaluatedProperties: false
        properties:
          days:
            type: integer
            title: DurationDays
            description: Number of days, if any.
          hours:
            type: integer
            title: DurationHours
            description: Number of days, if any.
          minutes:
            type: integer
            title: DurationMinutes
            description: Number of minutes, if any.
          seconds:
            type: integer
            title: DurationSeconds
            description: Number of seconds, if any.
          milliseconds:
            type: integer
            title: DurationMilliseconds
            description: Number of milliseconds, if any.
        title: DurationInline
        description: The inline definition of a duration.
      - type: string
        pattern: '^P(?!$)(\d+(?:\.\d+)?Y)?(\d+(?:\.\d+)?M)?(\d+(?:\.\d+)?W)?(\d+(?:\.\d+)?D)?(T(?=\d)(\d+(?:\.\d+)?H)?(\d+(?:\.\d+)?M)?(\d+(?:\.\d+)?S)?)?$'
        title: DurationExpression
        description: The ISO 8601 expression of a duration.
  error:
    type: object
    title: Error
    description: Represents an error.
    unevaluatedProperties: false
    properties:
      type:
        title: ErrorType
        description: A URI reference that identifies the error type.
        oneOf:
          - title: LiteralErrorType
            $ref: "#/$defs/uriTemplate"
            description: The literal error type.
          - title: ExpressionErrorType
            $ref: "#/$defs/runtimeExpression"
            description: An expression based error type.
      status:
        type: integer
        title: ErrorStatus
        description: The status code generated by the origin for this occurrence of the error.
      instance:
        title: ErrorInstance
        description: A JSON Pointer used to reference the component the error originates from.
        oneOf:
          - title: LiteralErrorInstance
            description: The literal error instance.
            type: string
            format: json-pointer
          - $ref: "#/$defs/runtimeExpression"
            title: ExpressionErrorInstance
            description: An expression based error instance.
      title:
        description: A short, human-readable summary of the error.
        title: ErrorTitle
        anyOf:
          - $ref: "#/$defs/runtimeExpression"
            title: ExpressionErrorTitle
          - type: string
            title: LiteralErrorTitle
      detail:
        title: ErrorDetails
        description: A human-readable explanation specific to this occurrence of the error.
        anyOf:
          - $ref: "#/$defs/runtimeExpression"
            title: ExpressionErrorDetails
          - type: string
            title: LiteralErrorDetails
    required: [type, status]
  errorFilter:
    type: object
    title: ErrorFilter
    description: Error filtering base on static values. For error filtering on dynamic values, use catch.when property
    minProperties: 1
    properties:
      type:
        type: string
        description: if present, means this value should be used for filtering
      status:
        type: integer
        description: if present, means this value should be used for filtering
      instance:
        type: string
        description: if present, means this value should be used for filtering
      title:
        type: string
        description: if present, means this value should be used for filtering
      details:
        type: string
        description: if present, means this value should be used for filtering
  uriTemplate:
    title: UriTemplate
    anyOf:
      - title: LiteralUriTemplate
        type: string
        format: uri-template
        pattern: "^[A-Za-z][A-Za-z0-9+\\-.]*://.*"
      - title: LiteralUri
        type: string
        format: uri
        pattern: "^[A-Za-z][A-Za-z0-9+\\-.]*://.*"
  endpoint:
    title: Endpoint
    description: Represents an endpoint.
    oneOf:
      - $ref: "#/$defs/runtimeExpression"
      - $ref: "#/$defs/uriTemplate"
      - title: EndpointConfiguration
        type: object
        unevaluatedProperties: false
        properties:
          uri:
            title: EndpointUri
            description: The endpoint's URI.
            oneOf:
              - title: LiteralEndpointURI
                description: The literal endpoint's URI.
                $ref: "#/$defs/uriTemplate"
              - title: ExpressionEndpointURI
                $ref: "#/$defs/runtimeExpression"
                description: An expression based endpoint's URI.
          authentication:
            $ref: "#/$defs/referenceableAuthenticationPolicy"
            title: EndpointAuthentication
            description: The authentication policy to use.
        required: [uri]
  eventProperties:
    type: object
    title: EventProperties
    description: Describes the properties of an event.
    properties:
      id:
        type: string
        title: EventId
        description: The event's unique identifier.
      source:
        title: EventSource
        description: Identifies the context in which an event happened.
        oneOf:
          - $ref: "#/$defs/uriTemplate"
          - $ref: "#/$defs/runtimeExpression"
      type:
        type: string
        title: EventType
        description: This attribute contains a value describing the type of event related to the originating occurrence.
      time:
        title: EventTime
        description: When the event occured.
        oneOf:
          - title: LiteralTime
            type: string
            format: date-time
          - $ref: "#/$defs/runtimeExpression"
      subject:
        type: string
        title: EventSubject
        description: The subject of the event.
      datacontenttype:
        type: string
        title: EventDataContentType
        description: Content type of data value. This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format.
      dataschema:
        title: EventDataschema
        description: The schema describing the event format.
        oneOf:
          - title: LiteralDataSchema
            $ref: "#/$defs/uriTemplate"
            description: The literal event data schema.
          - title: ExpressionDataSchema
            $ref: "#/$defs/runtimeExpression"
            description: An expression based event data schema.
      data:
        title: EventData
        description: The event's payload data
        anyOf:
          - $ref: "#/$defs/runtimeExpression"
          - {}
    additionalProperties: true
  externalResource:
    type: object
    title: ExternalResource
    description: Represents an external resource.
    unevaluatedProperties: false
    properties:
      name:
        type: string
        title: ExternalResourceName
        description: The name of the external resource, if any.
      endpoint:
        $ref: "#/$defs/endpoint"
        title: ExternalResourceEndpoint
        description: The endpoint of the external resource.
    required: [endpoint]
  input:
    type: object
    title: Input
    description: Configures the input of a workflow or task.
    unevaluatedProperties: false
    properties:
      schema:
        $ref: "#/$defs/schema"
        title: InputSchema
        description: The schema used to describe and validate the input of the workflow or task.
      from:
        title: InputFrom
        description: A runtime expression, if any, used to mutate and/or filter the input of the workflow or task.
        oneOf:
          - type: string
          - type: object
  output:
    type: object
    title: Output
    description: Configures the output of a workflow or task.
    unevaluatedProperties: false
    properties:
      schema:
        $ref: "#/$defs/schema"
        title: OutputSchema
        description: The schema used to describe and validate the output of the workflow or task.
      as:
        title: OutputAs
        description: A runtime expression, if any, used to mutate and/or filter the output of the workflow or task.
        oneOf:
          - type: string
          - type: object
  export:
    type: object
    title: Export
    description: Set the content of the context. .
    unevaluatedProperties: false
    properties:
      schema:
        $ref: "#/$defs/schema"
        title: ExportSchema
        description: The schema used to describe and validate the workflow context.
      as:
        title: ExportAs
        description: A runtime expression, if any, used to export the output data to the context.
        oneOf:
          - type: string
          - type: object
  retryPolicy:
    type: object
    title: RetryPolicy
    description: Defines a retry policy.
    unevaluatedProperties: false
    properties:
      delay:
        $ref: "#/$defs/duration"
        title: RetryDelay
        description: The duration to wait between retry attempts.
      backoff:
        type: object
        title: RetryBackoff
        description: The retry duration backoff.
        unevaluatedProperties: false
        oneOf:
          - title: ConstantBackoff
            properties:
              constant:
                type: object
                description: The definition of the constant backoff to use, if any. value is empty object.
            required: [constant]
          - title: ExponentialBackOff
            properties:
              exponential:
                type: object
                description: The definition of the exponential backoff to use, if any. value is empty object.
            required: [exponential]
          - title: LinearBackoff
            properties:
              linear:
                type: object
                description: The definition of the linear backoff to use, if any. value is empty object.
            required: [linear]
      limit:
        type: object
        title: RetryLimit
        unevaluatedProperties: false
        properties:
          attempt:
            type: object
            title: RetryLimitAttempt
            unevaluatedProperties: false
            properties:
              count:
                type: integer
                title: RetryLimitAttemptCount
                description: The maximum amount of retry attempts, if any.
              duration:
                $ref: "#/$defs/duration"
                title: RetryLimitAttemptDuration
                description: The maximum duration for each retry attempt.
        description: The retry limit, if any.
  schema:
    type: object
    title: Schema
    description: Represents the definition of a schema.
    unevaluatedProperties: false
    properties:
      format:
        type: string
        default: json
        title: SchemaFormat
        description: The schema's format. Defaults to 'json'. The (optional) version of the format can be set using `{format}:{version}`.
    oneOf:
      - title: SchemaInline
        properties:
          document:
            description: The schema's inline definition.
        required: [document]
      - title: SchemaExternal
        properties:
          resource:
            $ref: "#/$defs/externalResource"
            title: SchemaExternalResource
            description: The schema's external resource.
        required: [resource]
  timeout:
    type: object
    title: Timeout
    description: The definition of a timeout.
    unevaluatedProperties: false
    properties:
      after:
        $ref: "#/$defs/duration"
        title: TimeoutAfter
        description: The duration after which to timeout.
    required: [after]
  runtimeExpression:
    type: string
    title: RuntimeExpression
    description: A runtime expression.
    pattern: "^\\s*\\$\\{.+\\}\\s*$"
  processResult:
    type: object
    title: ProcessResult
    description: The object returned by a run task when its return type has been set 'all'.
    unevaluatedProperties: false
    properties:
      code:
        type: integer
        title: ProcessExitCode
        description: The process's exit code.
      stdout:
        type: string
        title: ProcessStandardOutput
        description: The content of the process's STDOUT.
      stderr:
        type: string
        title: ProcessStandardError
        description: The content of the process's STDERR.
    required: [code, stdout, stderr]
  jqString:
    type: string
    title: JqString
    description: A jq expression.
    pattern: "^\\s*\\$\\{.+\\}\\s*$"
  templateString:
    type: string
    title: TemplateString
    description: A liquid template expression.
    pattern: "^\\$\\$\\{\\{[\\s\\S]+\\}\\}\\s*$"
  plainString:
    type: string
    title: PlainString
    description: A plain string.
    pattern: "^\\s*[^\\$\\{].*[^\\$\\{]\\s*$"
