syntax = "proto3";

package jobworkerp.service;

import "jobworkerp/service/common.proto";
import "jobworkerp/data/common.proto";
import "jobworkerp/data/worker.proto";
import "jobworkerp/data/job.proto";
import "jobworkerp/data/job_result.proto";

message OptionalJobResultResponse {
    optional jobworkerp.data.JobResult data = 1;
}

message ListenRequest {
    jobworkerp.data.JobId job_id = 1;
    oneof worker { // worker to execute (specified by id or name)
        jobworkerp.data.WorkerId worker_id = 2;
        string worker_name = 3;
    }
    optional uint64 timeout = 4;
}

message FindListByJobIdRequest {
    jobworkerp.data.JobId job_id = 1;
}

service JobResultService {
  // delete job result
  rpc Delete(jobworkerp.data.JobResultId) returns (SuccessResponse);
  // find by job result id
  rpc Find(jobworkerp.data.JobResultId) returns (OptionalJobResultResponse);
  rpc FindList(FindListRequest) returns (stream jobworkerp.data.JobResult);
  // (find only latest result in storage_type=redis.)
  rpc FindListByJobId(FindListByJobIdRequest) returns (stream jobworkerp.data.JobResult);
  // listen job result until timeout or job result is created.
  rpc Listen(ListenRequest) returns (jobworkerp.data.JobResult);
  rpc Count(CountCondition) returns (CountResponse);
}
