syntax = "proto3";

package jobworkerp.service;

import "jobworkerp/data/common.proto";
import "jobworkerp/data/job_result.proto";
import "jobworkerp/data/worker.proto";
import "jobworkerp/data/job.proto";
import "jobworkerp/service/common.proto";

message CreateJobResponse {
  jobworkerp.data.JobId id = 1; // generated id
  optional jobworkerp.data.JobResult result =
      2; // direct job result worker only
}

message OptionalJobResponse { optional jobworkerp.data.Job data = 1; }

message JobRequest {
  // worker to execute (specified by id or name)
  oneof worker {
    jobworkerp.data.WorkerId worker_id = 1;
    string worker_name = 2;
  }
  // argument for the job
  bytes args = 3;
  // prevent from registering the same keys job in queue at the same time
  optional string uniq_key = 4;
  // time to execute job (epoch milliseconds)(not specify 0 explicitly)
  // job priority(high, medium, low)
  optional int64 run_after_time = 5;
  optional jobworkerp.data.Priority priority = 6;
  // valid only for run_after or periodic worker jobs
  optional uint64 timeout = 7;
}

service JobService {
  rpc Enqueue(JobRequest) returns (CreateJobResponse);
  // Direct response only, JobResult on metadata header of grpc response
  // TODO Now support only for worker with storage_type: Scalable
  rpc EnqueueForStream(JobRequest)
      returns (stream jobworkerp.data.ResultOutputItem);
  rpc Delete(jobworkerp.data.JobId) returns (SuccessResponse);
  // only use db or redis+db queue type, run after or periodic worker jobs
  rpc Find(jobworkerp.data.JobId) returns (OptionalJobResponse);
  // only use db or redis+db queue type, run after or periodic worker jobs
  rpc FindList(FindListRequest) returns (stream jobworkerp.data.Job);
  rpc FindQueueList(FindQueueListRequest) returns (stream JobAndStatus);
  rpc Count(CountCondition) returns (CountResponse);
}

message FindQueueListRequest {
  optional int32 limit = 1;
  optional string channel = 2;
}

message JobAndStatus {
  jobworkerp.data.Job job = 1;
  optional jobworkerp.data.JobStatus status = 2;
}

message JobStatusResponse {
  jobworkerp.data.JobId id = 1;
  jobworkerp.data.JobStatus status = 2;
}

message OptionalJobStatusResponse {
  optional jobworkerp.data.JobStatus status = 1;
}

service JobStatusService {
  rpc Find(jobworkerp.data.JobId) returns (OptionalJobStatusResponse);
  rpc FindAll(jobworkerp.data.Empty) returns (stream JobStatusResponse);
}

message JobRestoreRequest {
  // restore jobs includes grabbed to run process (maybe run twice or more)
  optional bool include_grabbed = 1;
  optional int32 limit = 2;
}

// [for Scalable storage only] restore jobs from rdb to redis
// (for lost job insident in redis)
// (except for periodic jobs and jobs with run_after_time)
service JobRestoreService {
  rpc Restore(JobRestoreRequest) returns (SuccessResponse);
  // find all jobs to restore
  rpc FindAll(JobRestoreRequest) returns (stream jobworkerp.data.Job);
}
