syntax = "proto3";

package jobworkerp.function.data;

import "jobworkerp/data/common.proto";
import "jobworkerp/data/runner.proto";
import "jobworkerp/data/worker.proto";

// # Function Specs
// Metadata that describes function capabilities and interface for clients
// Represents either a runner or worker as a function
message FunctionSpecs {
  // # Runner Type
  jobworkerp.data.RunnerType runner_type = 1;

  // # Runner ID
  // Runner Id for the function
  jobworkerp.data.RunnerId runner_id = 2;

  // # Worker ID
  // Worker Id for the function. present if created as a worker
  optional jobworkerp.data.WorkerId worker_id = 3;

  // # Function Name
  // Unique identifier for the function (e.g. "command", "image-processor")
  string name = 4;
  // # Function Description
  // Human-readable explanation of what the function does
  string description = 5;
  // # Stream Output Type
  // When STREAMING or BOTH, the function supports streaming output mode
  // (Enables JobService/EnqueueForStream and JobResultService/ListenStream)
  // Default: NON_STREAMING
  jobworkerp.data.StreamingOutputType output_type = 6;

  // # Function Input/Output Definition
  // JSON schema defining the function's input, output parameters
  oneof schema {
    // # normal function spec
    FunctionSchema single_schema = 7;
    // # mcp function spec (multiple tools in a Mcp server)
    McpToolList mcp_tools = 8;
  }
}

message FunctionSchema {
  // # Function Settings Definition
  // JSON schema for function setting parameters
  // If empty, the function requires no settings
  // (Always empty when this spec is for a worker)
  optional string settings = 1;
  // # Job Arguments Definition
  // JSON schema defining the parameters required for job execution
  string arguments = 2;
  // # Result Output Definition
  // JSON schema defining the structure of job execution results
  optional string result_output_schema = 3;
}

message McpToolList {
  // # Tool List
  // A list of tools that can be used by the model.
  repeated McpTool list = 1;
}

// # mcp tool
// A tool that can be used by a model.
message McpTool {
  // # Tool Name
  string name = 1;
  // # Tool Description
  // A description of what the tool does
  optional string description = 2;
  // # Input schema
  // A JSON Schema object defining the expected parameters for the tool
  string input_schema = 3;
  // # Additional tool information.
  optional ToolAnnotations annotations = 4;
}

// # Additional properties describing a Tool to clients.
//
// NOTE: all properties in ToolAnnotations are **hints**.
// They are not guaranteed to provide a faithful description of
// tool behavior (including descriptive properties like `title`).
//
// Clients should never make tool use decisions based on ToolAnnotations
// received from untrusted servers.
message ToolAnnotations {
  // # A human-readable title for the tool.
  optional string title = 1;

  // If true, the tool does not modify its environment.
  optional bool read_only_hint = 2;

  // # A human-readable description of the tool's purpose.
  // If true, the tool may perform destructive updates to its environment.
  // If false, the tool performs only additive updates.
  // (This property is meaningful only when `readOnlyHint == false`)
  // Default: true
  optional bool destructive_hint = 3;

  // If true, calling the tool repeatedly with the same arguments
  // will have no additional effect on the its environment.
  // (This property is meaningful only when `readOnlyHint == false`)
  optional bool idempotent_hint = 4;

  // If true, this tool may interact with an "open world" of external
  // entities. If false, the tool's domain of interaction is closed.
  // For example, the world of a web search tool is open, whereas that
  // of a memory tool is not.
  // Default: true
  optional bool open_world_hint = 5;
}

// # Worker options
// Configuration for worker execution (partial jobworkerp.data.WorkerData)
message WorkerOptions {
  // # Retry Policy
  // Configuration for job retry behavior on failure
  jobworkerp.data.RetryPolicy retry_policy = 1;
  // # Channel Name
  // Message channel for job (if empty, default channel will be used)
  optional string channel = 2;
  // # with backup flag
  // If true, enqueued job will be backed up to database in execution
  // (if true, set Queue Type WithBackup)
  bool with_backup = 3;
  // # Store Success Flag
  // If true, job results will be stored in database when execution succeeds
  bool store_success = 4;
  // # Store Failure Flag
  // If true, job results will be stored in database when execution fails
  bool store_failure = 5;
  // # Static Execution Flag
  // If true, keep a fixed number instance of this worker running at a time in
  // memory
  bool use_static = 6;
  // # Output Broadcast Flag
  // Broadcast job results to all result listeners or not.
  // If false, cannot use JobResultService/{Listen, ListenStream,
  // ListenByWorker}.
  bool broadcast_results = 7;
}

// # Function Call Options
// Options for function call execution
message FunctionCallOptions {
  // Timeout in milliseconds
  optional int64 timeout_ms = 1;
  // Enable streaming output
  optional bool streaming = 2;
  // Custom metadata for request context
  map<string, string> metadata = 3;
}

// # Function Execution Metadata
// Contains metadata about function execution
message FunctionExecutionInfo {
  // Job ID assigned to this execution
  string job_id = 1;
  // Execution start time (Unix timestamp in milliseconds)
  int64 started_at = 2;
  // Execution completion time (Unix timestamp in milliseconds)
  optional int64 completed_at = 3;
  // Total execution time in milliseconds
  optional int64 execution_time_ms = 4;
  // Additional metadata for the execution(trail)
  map<string, string> metadata = 5;
}

// # Function Result Data
// Contains the execution result and metadata of a function call
message FunctionResult {
  // # Result Output
  // Function execution output data (JSON string)
  string output = 1;

  // # Result Status
  // Execution status of the function (success, failure, etc.)
  optional jobworkerp.data.ResultStatus status = 2;

  // # Error Message
  // Detailed error message when execution fails
  optional string error_message = 3;

  // # Error Code
  // Error code for programmatic error handling
  optional string error_code = 4;

  // # Execution last info
  // Additional information about the execution in last of stream
  optional FunctionExecutionInfo last_info = 5;
}
