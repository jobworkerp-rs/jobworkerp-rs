syntax = "proto3";

package jobworkerp.function.service;

import "jobworkerp/data/common.proto";
import "jobworkerp/data/runner.proto";
import "jobworkerp/data/worker.proto";
import "jobworkerp/function/data/function.proto";

message FindFunctionRequest {
  bool exclude_runner = 1;
  bool exclude_worker = 2;
}

message FindFunctionSetRequest {
  // FunctionSet name
  string name = 1;
}

// Function search request by ID
message FindFunctionByIdRequest {
  // Target ID to search for (specify either runner ID or worker ID)
  oneof id {
    jobworkerp.data.RunnerId runner_id = 1;
    jobworkerp.data.WorkerId worker_id = 2;
  }
}

// Function search request by name
message FindFunctionByNameRequest {
  // Target name to search for (specify either runner name or worker name)
  oneof name {
    string runner_name = 1;
    string worker_name = 2;
  }
}

// Function search response (for consistency with existing services)
message OptionalFunctionSpecsResponse {
  // Search result (None if not found)
  optional jobworkerp.function.data.FunctionSpecs data = 1;
}
// runner parameters to create as a worker
message RunnerParameters {
  // Runner Settings in JSON format (from protobuf schema)
  string settings_json = 1;
  // Worker options (from protobuf schema)
  jobworkerp.function.data.WorkerOptions worker_options = 2;
}
message FunctionCallRequest {
  // Runner or Worker name to execute
  oneof name {
    string runner_name = 1;
    string worker_name = 2;
  }
  // Runner parameters (only for runner_name is set)
  optional RunnerParameters runner_parameters = 3;

  // Job Arguments in JSON format (with protobuf schema:
  // jobworkerp.data.RunnerData.job_args_proto)
  string args_json = 4;

  // Prevent from registering the same keys job in queue at the same time
  optional string uniq_key = 5;

  // Execution options
  optional jobworkerp.function.data.FunctionCallOptions options = 6;
}

service FunctionService {
  rpc FindList(FindFunctionRequest)
      returns (stream jobworkerp.function.data.FunctionSpecs);
  rpc FindListBySet(FindFunctionSetRequest)
      returns (stream jobworkerp.function.data.FunctionSpecs);
  rpc Call(FunctionCallRequest)
      returns (stream jobworkerp.function.data.FunctionResult);
  
  // Function search by function ID
  rpc Find(FindFunctionByIdRequest) returns (OptionalFunctionSpecsResponse);
  
  // Function search by function name
  rpc FindByName(FindFunctionByNameRequest) returns (OptionalFunctionSpecsResponse);
}
