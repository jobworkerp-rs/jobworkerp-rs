syntax = "proto3";

package jobworkerp.data;

import "jobworkerp/data/common.proto";

// # Output Type
// Defines the streaming capability of the runner
enum StreamingOutputType {
  NON_STREAMING = 0; // Runner only supports non-streaming output
  STREAMING = 1;     // Runner only supports streaming output
  BOTH = 2;          // Runner supports both streaming and non-streaming outputs
}

message RunnerData {
  // # Runner Name
  // Unique key and proto message prefix (e.g. name: "command",
  // runner_settings_proto: "CommandRunnerSettings", job_args_proto:
  // "CommandArg")
  string name = 1;
  // # Runner Description
  // Description of runner implementation
  string description = 2;
  // # Runner Type
  // Defines the category of runner implementation
  jobworkerp.data.RunnerType runner_type = 3;
  // # Runner Settings Definition
  // Proto file definition for runner configuration
  string runner_settings_proto = 4;
  // # Job Arguments Definition
  // Proto file definition for job arguments
  string job_args_proto = 5;
  // # Result Output Definition
  // Proto file definition for job execution results
  // If empty, UTF-8 string will be used as bytes array for result output
  optional string result_output_proto = 6;
  // # Output Type Configuration
  // Specifies the streaming capability of this runner
  // This determines how job results can be retrieved from this runner
  StreamingOutputType output_type = 7;
  // # definition
  // runner definition
  // mcp: mcp_server toml
  // plugin: plugin filepath
  string definition = 8;
}

message RunnerId { int64 value = 1; }

message Runner {
  RunnerId id = 1;
  RunnerData data = 2;
}
