syntax = "proto3";

package jobworkerp.data;

import "jobworkerp/data/common.proto";
import "jobworkerp/data/worker_schema.proto";

// internal use: notify job result to slack as next_worker
message SlackJobResultOperation {}


// command job operation
message CommandOperation {
  // command name (e.g. "echo")
  string name = 1;
}

// docker job operation
message DockerOperation {
    /// Name of the image to pull. The name may include a tag or digest. This parameter may only be
    /// used when pulling an image. The pull is cancelled if the HTTP connection is closed.
    optional string from_image = 1;
    /// Source to import. The value may be a URL from which the image can be retrieved or `-` to
    /// read the image from the request body. This parameter may only be used when importing an
    /// image.
    optional string from_src = 2;
    /// Repository name given to an image when it is imported. The repo may include a tag. This
    /// parameter may only be used when importing an image.
    optional string repo = 3;
    /// Tag or digest. If empty when pulling an image, this causes all tags for the given image to
    /// be pulled.
    optional string tag = 4;
    /// Platform in the format `os[/arch[/variant]]`
    optional string platform = 5;

    /// An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`
    // repeated string exposed_ports = 6;

    /// A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
    repeated string env = 7;

    /// An object mapping mount point paths inside the container to empty objects.
    repeated string volumes = 8;

    /// The working directory for commands to run in.
    optional string working_dir = 9;

    /// The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
    repeated string entrypoint = 10;

    /// Disable networking for the container.
    // optional bool network_disabled = 11;

    /// MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.
    // optional string mac_address = 12;


}

// plugin job operation
message PluginOperation {
  string name = 1;
}

// grpc unary request operation
message GrpcUnaryOperation {
    string host = 1;
    uint32 port = 2;
}

// http request operation
message HttpRequestOperation {
    string base_url = 1;
}

message WorkerData {
    string name                                 = 1; // worker name
    jobworkerp.data.WorkerSchemaId schema_id    = 2; // runner schema id
    bytes operation                             = 3; // worker operation (docker operation etc)
    jobworkerp.data.RetryPolicy retry_policy    = 4; // retry policy
    uint32 periodic_interval                    = 5; // periodic interval milliseconds (0: non-periodic) (if enabled, cannot use direct_response)
    optional string channel                     = 6; // channel name (if empty, use default channel)
    jobworkerp.data.QueueType queue_type        = 7; // queue type (only for instant job in hybrid storage type, ignored if not valid by storage type config or run_after, periodic job)
    jobworkerp.data.ResponseType response_type  = 8; // response type
    bool store_success                          = 9; // if true, store result to db when process succeeded
    bool store_failure                          = 10; // if true, store result to db when process failed
    repeated WorkerId next_workers              = 11; // if exists, enqueue jobs after jobs of the worker
    bool use_static                             = 12; // if true, use as static (run only one worker(runner) at a time with lock)
}

message WorkerId {
    int64 value = 1;
}

message Worker {
  WorkerId id = 1;
  WorkerData data = 2;
}

